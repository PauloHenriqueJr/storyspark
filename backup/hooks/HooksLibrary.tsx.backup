import { useState, useEffect, useMemo } from "react";
import { HookCard } from "./HookCard";
import { HookFilters } from "./HookFilters";
import { hooks, Hook, getHooksByCategory, searchHooks } from "@/data/hooks";
import { Button } from "@/components/ui/button";
import { ArrowLeft, Lightbulb, Zap, Users, Target, Clock, Search } from "lucide-react";
import { useNavigate } from "react-router-dom";

export const HooksLibrary = () => {
  const navigate = useNavigate();
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedCategory, setSelectedCategory] = useState<Hook['category'] | 'all'>('all');
  
  const filteredHooks = useMemo(() => {
    let result = hooks;
    if (selectedCategory !== 'all') result = getHooksByCategory(selectedCategory);
    if (searchQuery.trim()) {
      const searchResults = searchHooks(searchQuery.trim());
      result = selectedCategory !== 'all' 
        ? result.filter(hook => hook && searchResults.some(searchHook => searchHook && searchHook.id === hook.id))
        : searchResults.filter(hook => hook && hook.id);
    }
    return result;
  }, [searchQuery, selectedCategory]);

  useEffect(() => {
    document.title = "Biblioteca de Hooks - StorySpark";
  }, []);

  const handleHookUse = (hook: Hook) => { /* analytics or side-effects */ };

  const getCategoryIcon = (category: Hook['category']) => {
    switch (category) {
      case 'Curiosidade': return <Lightbulb className="h-5 w-5" />;
      case 'Autoridade': return <Target className="h-5 w-5" />;
      case 'Urgência': return <Clock className="h-5 w-5" />;
      case 'Storytelling': return <Users className="h-5 w-5" />;
      case 'Prova Social': return <Zap className="h-5 w-5" />;
      default: return null;
    }
  };

  return (
    <div className="min-h-screen bg-background">
      <div className="container mx-auto px-4 py-8">
        <div className="text-center mb-12 max-w-3xl mx-auto">
          <div className="mb-6">
            <div className="inline-flex items-center gap-3 bg-primary/10 text-primary px-4 py-2 rounded-full text-sm font-medium mb-4">
              <Zap className="h-4 w-4" />
              500+ Hooks Validados
            </div>
            <h2 className="text-4xl md:text-5xl font-bold text-foreground mb-4 leading-tight">
              Ganhe tempo com aberturas que <span className="text-primary">já provaram funcionar</span>
            </h2>
            <p className="text-lg text-muted-foreground leading-relaxed">
              Escolha um hook testado em campanhas reais e deixe a IA expandir sua copy. Cada abertura foi validada por profissionais de marketing.
            </p>
          </div>
          <div className="flex justify-center items-center gap-8 text-muted-foreground mb-8">
            {(['Curiosidade', 'Autoridade', 'Urgência', 'Storytelling', 'Prova Social'] as Hook['category'][]).map((category) => (
              <div key={category} className="flex flex-col items-center gap-2 cursor-pointer hover:text-primary" onClick={() => setSelectedCategory(category)}>
                {getCategoryIcon(category)}
                <span className="text-xs font-medium hidden sm:block">{category}</span>
              </div>
            ))}
          </div>
        </div>

        <HookFilters
          searchQuery={searchQuery}
          setSearchQuery={setSearchQuery}
          selectedCategory={selectedCategory}
          setSelectedCategory={setSelectedCategory}
          resultCount={filteredHooks.length}
        />

        {filteredHooks.length > 0 ? (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {filteredHooks.filter(hook => hook && hook.id).map((hook) => (
              <HookCard key={hook.id} hook={hook} onUse={handleHookUse} />
            ))}
          </div>
        ) : (
          <div className="text-center py-16">
            <div className="max-w-md mx-auto">
              <div className="w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4">
                <Search className="h-8 w-8 text-muted-foreground" />
              </div>
              <h3 className="text-lg font-semibold text-foreground mb-2">Nenhum hook encontrado</h3>
              <p className="text-muted-foreground mb-6">Tente ajustar seus filtros ou buscar por outros termos.</p>
              <Button variant="outline" onClick={() => { setSearchQuery(''); setSelectedCategory('all'); }}>Limpar filtros</Button>
            </div>
          </div>
        )}

        <div className="mt-16 text-center">
          <div className="bg-gradient-to-r from-primary/5 via-primary/10 to-primary/5 rounded-2xl p-8 border border-primary/20">
            <h3 className="text-2xl font-bold text-foreground mb-4">Pronto para criar sua copy matadora?</h3>
            <p className="text-muted-foreground mb-6 max-w-2xl mx-auto">Escolha um hook acima e deixe nossa IA expandir em uma copy completa e persuasiva.</p>
            <Button onClick={() => navigate("/composer")} size="lg" className="bg-primary text-primary-foreground px-8">
              <Zap className="h-5 w-5 mr-2" />
              Ir para o Composer IA
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
};

