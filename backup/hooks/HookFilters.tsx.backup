import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Hook, categories } from "@/data/hooks";
import { Search, Filter, X } from "lucide-react";
import { useState } from "react";

interface HookFiltersProps {
  searchQuery: string;
  setSearchQuery: (query: string) => void;
  selectedCategory: Hook['category'] | 'all';
  setSelectedCategory: (category: Hook['category'] | 'all') => void;
  resultCount: number;
}

export const HookFilters = ({ searchQuery, setSearchQuery, selectedCategory, setSelectedCategory, resultCount }: HookFiltersProps) => {
  const [isExpanded, setIsExpanded] = useState(false);
  const clearFilters = () => { setSearchQuery(''); setSelectedCategory('all'); };
  const hasActiveFilters = searchQuery.length > 0 || selectedCategory !== 'all';
  const getCategoryColor = (category: Hook['category']) => {
    switch (category) {
      case 'Curiosidade': return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300 border-blue-200';
      case 'Autoridade': return 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300 border-purple-200';
      case 'UrgÃªncia': return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300 border-red-200';
      case 'Storytelling': return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300 border-green-200';
      case 'Prova Social': return 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-300 border-orange-200';
      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300 border-gray-200';
    }
  };
  return (
    <div className="space-y-4 mb-6">
      <div className="md:hidden">
        <Button variant="outline" onClick={() => setIsExpanded(!isExpanded)} className="w-full justify-between">
          <div className="flex items-center gap-2">
            <Filter className="h-4 w-4" />
            Filtros
            {hasActiveFilters && (<Badge variant="secondary" className="ml-2">{selectedCategory !== 'all' ? 1 : 0}{searchQuery ? '+1' : ''}</Badge>)}
          </div>
        </Button>
      </div>
      <div className={`space-y-4 ${!isExpanded ? 'hidden md:block' : ''}`}>
        <div className="flex flex-col md:flex-row gap-4">
          <div className="relative flex-1">
            <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
            <Input placeholder="Buscar hooks por palavra-chave..." value={searchQuery} onChange={(e) => setSearchQuery(e.target.value)} className="pl-10 pr-4 bg-background border-border/50 focus:border-primary/50" />
          </div>
          <div className="md:w-48">
            <Select value={selectedCategory} onValueChange={(value) => setSelectedCategory(value as Hook['category'] | 'all')}>
              <SelectTrigger className="bg-background border-border/50 focus:border-primary/50">
                <SelectValue placeholder="Todas as categorias" />
              </SelectTrigger>
              <SelectContent className="bg-popover border-border">
                <SelectItem value="all" className="hover:bg-accent">Todas as categorias</SelectItem>
                {categories.map((category) => (
                  <SelectItem key={category} value={category} className="hover:bg-accent">{category}</SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
          {hasActiveFilters && (
            <Button variant="outline" size="sm" onClick={clearFilters} className="shrink-0 text-muted-foreground hover:text-foreground">
              <X className="h-4 w-4 mr-2" />
              Limpar
            </Button>
          )}
        </div>
        <div className="flex flex-wrap gap-2">
          <Badge variant={selectedCategory === 'all' ? 'default' : 'outline'} className={`cursor-pointer ${selectedCategory === 'all' ? 'bg-primary text-primary-foreground' : ''}`} onClick={() => setSelectedCategory('all')}>
            Todas ({resultCount})
          </Badge>
          {categories.map((category) => (
            <Badge key={category} variant="outline" className={`cursor-pointer ${selectedCategory === category ? getCategoryColor(category) : 'hover:bg-accent'}`} onClick={() => setSelectedCategory(category)}>
              {category}
            </Badge>
          ))}
        </div>
        {hasActiveFilters && (
          <div className="flex items-center gap-2 text-sm text-muted-foreground">
            <span>Filtros ativos:</span>
            {selectedCategory !== 'all' && (
              <Badge variant="secondary" className={getCategoryColor(selectedCategory)}>
                {selectedCategory}
                <X className="h-3 w-3 ml-1 cursor-pointer hover:text-destructive" onClick={() => setSelectedCategory('all')} />
              </Badge>
            )}
            {searchQuery && (
              <Badge variant="secondary">
                "{searchQuery}"
                <X className="h-3 w-3 ml-1 cursor-pointer hover:text-destructive" onClick={() => setSearchQuery('')} />
              </Badge>
            )}
          </div>
        )}
        <div className="text-sm text-muted-foreground">{resultCount} hook{resultCount !== 1 ? 's' : ''} encontrado{resultCount !== 1 ? 's' : ''}</div>
      </div>
    </div>
  );
};

