import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { useAuth } from '@/components/auth/AuthProvider';
import { supabase } from '@/lib/supabase';
import { Search, AlertTriangle } from 'lucide-react';

const DeepDiagnostic: React.FC = () => {
    const [loading, setLoading] = useState(false);
    const [result, setResult] = useState<string>('');
    const { user } = useAuth();

    const runDeepDiagnostic = async () => {
        if (!user) {
            setResult('‚ùå Usu√°rio n√£o autenticado');
            return;
        }

        setLoading(true);
        const results: string[] = [];

        try {
            // 1. Verificar se RLS est√° realmente habilitado
            results.push('üîç TESTE 1: Verificando RLS...');

            try {
                const { data: rlsData, error: rlsError } = await supabase
                    .rpc('check_rls_status');

                if (rlsError) {
                    results.push(`‚ö†Ô∏è N√£o foi poss√≠vel verificar RLS via RPC: ${rlsError.message}`);
                } else {
                    results.push(`‚úÖ RLS Status via RPC: ${JSON.stringify(rlsData)}`);
                }
            } catch (e) {
                results.push(`‚ö†Ô∏è RPC check_rls_status n√£o dispon√≠vel`);
            }

            // 2. Testar com RLS temporariamente desabilitado (via SQL)
            results.push('\nüîç TESTE 2: Tentando desabilitar RLS temporariamente...');

            try {
                // Tentar executar SQL que desabilita RLS temporariamente
                const { data: disableData, error: disableError } = await supabase
                    .rpc('temp_disable_rls_test');

                if (disableError) {
                    results.push(`‚ùå N√£o foi poss√≠vel desabilitar RLS: ${disableError.message}`);
                } else {
                    results.push(`‚úÖ RLS temporariamente desabilitado para teste`);
                }
            } catch (e) {
                results.push(`‚ö†Ô∏è Fun√ß√£o temp_disable_rls_test n√£o dispon√≠vel`);
            }

            // 3. Verificar permiss√µes do usu√°rio atual
            results.push('\nüîç TESTE 3: Verificando permiss√µes do usu√°rio...');

            try {
                const { data: userInfo, error: userError } = await supabase
                    .rpc('get_current_user_info');

                if (userError) {
                    results.push(`‚ùå Erro ao obter info do usu√°rio: ${userError.message}`);
                } else {
                    results.push(`‚úÖ Info do usu√°rio: ${JSON.stringify(userInfo)}`);
                }
            } catch (e) {
                results.push(`‚ö†Ô∏è Fun√ß√£o get_current_user_info n√£o dispon√≠vel`);
            }

            // 4. Testar inser√ß√£o em uma tabela diferente (para verificar se √© problema geral)
            results.push('\nüîç TESTE 4: Testando inser√ß√£o em outra tabela...');

            try {
                // Tentar inserir em auth.users (que deveria falhar, mas com erro diferente)
                const { data: testData, error: testError } = await supabase
                    .from('profiles') // ou qualquer outra tabela que possa existir
                    .select('*')
                    .limit(1);

                if (testError) {
                    results.push(`‚ö†Ô∏è Tabela profiles n√£o existe ou sem acesso: ${testError.message}`);
                } else {
                    results.push(`‚úÖ Acesso a outras tabelas funciona`);
                }
            } catch (e) {
                results.push(`‚ö†Ô∏è N√£o foi poss√≠vel testar outras tabelas`);
            }

            // 5. Verificar se o problema √© com a conex√£o/autentica√ß√£o
            results.push('\nüîç TESTE 5: Verificando conex√£o e autentica√ß√£o...');

            const { data: session } = await supabase.auth.getSession();

            if (session.session) {
                results.push(`‚úÖ Sess√£o v√°lida: ${session.session.user.id}`);
                results.push(`‚úÖ Token expira: ${new Date(session.session.expires_at! * 1000).toLocaleString()}`);
                results.push(`‚úÖ Roles: ${JSON.stringify(session.session.user.role || 'authenticated')}`);

                // Verificar se o token n√£o est√° expirado
                const now = Date.now() / 1000;
                const expiresAt = session.session.expires_at!;

                if (now >= expiresAt) {
                    results.push(`‚ùå TOKEN EXPIRADO! Agora: ${now}, Expira: ${expiresAt}`);
                } else {
                    results.push(`‚úÖ Token v√°lido por mais ${Math.round((expiresAt - now) / 60)} minutos`);
                }
            } else {
                results.push(`‚ùå Sess√£o inv√°lida ou expirada`);
            }

            // 6. Teste final - tentar uma opera√ß√£o muito simples
            results.push('\nüîç TESTE 6: Opera√ß√£o mais simples poss√≠vel...');

            try {
                // Apenas contar registros existentes
                const { count, error: countError } = await supabase
                    .from('ai_processing_jobs')
                    .select('*', { count: 'exact', head: true });

                if (countError) {
                    results.push(`‚ùå At√© mesmo COUNT falhou: ${countError.message} (${countError.code})`);

                    if (countError.code === '42501') {
                        results.push(`üîç DIAGN√ìSTICO: Erro 42501 at√© no COUNT indica problema fundamental com RLS`);
                        results.push(`üîç POSS√çVEL CAUSA: RLS n√£o foi realmente desabilitado ou h√° problema com auth.uid()`);
                    }
                } else {
                    results.push(`‚úÖ COUNT funcionou: ${count} registros`);
                }
            } catch (e) {
                results.push(`‚ùå Erro no COUNT: ${e}`);
            }

            // 7. Diagn√≥stico final
            results.push('\nüìã DIAGN√ìSTICO FINAL:');
            results.push('Se at√© opera√ß√µes simples como COUNT falham com 42501,');
            results.push('o problema √© que RLS ainda est√° ativo e auth.uid() n√£o est√° funcionando.');
            results.push('\nüí° PR√ìXIMOS PASSOS:');
            results.push('1. Verificar se as pol√≠ticas foram realmente aplicadas no Supabase Dashboard');
            results.push('2. Tentar desabilitar RLS completamente na tabela');
            results.push('3. Verificar se h√° algum problema com a fun√ß√£o auth.uid()');

        } catch (error) {
            results.push(`‚ùå ERRO GERAL: ${error instanceof Error ? error.message : 'Erro desconhecido'}`);
        }

        setResult(results.join('\n'));
        setLoading(false);
    };

    return (
        <Card className="w-full">
            <CardHeader>
                <CardTitle className="flex items-center gap-2">
                    <Search className="h-5 w-5" />
                    Diagn√≥stico Profundo
                </CardTitle>
                <CardDescription>
                    An√°lise completa de todos os pontos poss√≠veis do problema
                </CardDescription>
            </CardHeader>

            <CardContent className="space-y-4">
                <Button
                    onClick={runDeepDiagnostic}
                    disabled={loading || !user}
                    className="w-full"
                >
                    {loading ? 'Executando Diagn√≥stico Profundo...' : 'Executar Diagn√≥stico Profundo'}
                </Button>

                {!user && (
                    <div className="flex items-center gap-2 text-yellow-600">
                        <AlertTriangle className="h-4 w-4" />
                        <span className="text-sm">Fa√ßa login para executar o diagn√≥stico</span>
                    </div>
                )}

                {result && (
                    <div className="bg-gray-50 dark:bg-gray-800 rounded-lg p-4 max-h-96 overflow-y-auto">
                        <pre className="text-sm whitespace-pre-wrap font-mono">
                            {result}
                        </pre>
                    </div>
                )}
            </CardContent>
        </Card>
    );
};

export default DeepDiagnostic;