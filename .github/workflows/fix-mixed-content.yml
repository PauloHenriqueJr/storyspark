name: Fix Mixed Content and Force HTTPS

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'Dockerfile'
      - '.github/workflows/fix-mixed-content.yml'

jobs:
  fix-mixed-content:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Create HTTPS enforcement configuration
      run: |
        # Create environment configuration for production
        cat > .env.production << EOF
        # Production HTTPS Configuration
        VITE_FORCE_HTTPS=true
        VITE_APP_URL=https://app.storyspark.com.br
        VITE_API_URL=https://app.storyspark.com.br
        VITE_DOMAIN=storyspark.com.br
        VITE_SECURE_COOKIES=true
        EOF
        
        echo "✅ Production environment configuration created"
        
    - name: Update Vite configuration for HTTPS
      run: |
        # Backup original vite.config.ts
        cp vite.config.ts vite.config.ts.bak
        
        # Update vite.config.ts to include HTTPS enforcement
        cat > vite.config.ts << 'EOF'
        import { defineConfig } from "vite";
        import react from "@vitejs/plugin-react-swc";
        import path from "path";
        import { VitePWA } from "vite-plugin-pwa";

        // https://vitejs.dev/config/
        export default defineConfig(({ mode }) => ({
          server: {
            host: "::",
            port: 8080,
            // Force HTTPS in development if needed
            https: mode === 'production' ? false : false
          },
          define: {
            // Global constants for HTTPS enforcement
            __FORCE_HTTPS__: mode === 'production',
            __APP_DOMAIN__: JSON.stringify(mode === 'production' ? 'storyspark.com.br' : 'localhost')
          },
          plugins: [
            react(),
            VitePWA({
              registerType: "autoUpdate",
              includeAssets: [
                "favicon2.ico",
                "apple-touch-icon.png",
                "masked-icon.svg",
              ],
              manifest: {
                name: "StorySpark - IA Copy Creator",
                short_name: "StorySpark",
                description: "Crie copies que vendem com IA avançada",
                theme_color: "#f97316",
                background_color: "#ffffff",
                display: "standalone",
                orientation: "portrait",
                scope: "/",
                start_url: "/",
                // Force HTTPS for PWA in production
                start_url: mode === 'production' ? "https://app.storyspark.com.br/" : "/",
                icons: [
                  {
                    src: "/pwa-192x192.png",
                    sizes: "192x192",
                    type: "image/png",
                  },
                  {
                    src: "/pwa-512x512.png",
                    sizes: "512x512",
                    type: "image/png",
                  },
                  {
                    src: "/pwa-512x512.png",
                    sizes: "512x512",
                    type: "image/png",
                    purpose: "any maskable",
                  },
                ],
              },
              workbox: {
                globPatterns: ["**/*.{js,css,html,ico,png,svg}"],
                runtimeCaching: [
                  {
                    urlPattern: /^https:\/\/fonts\.googleapis\.com\/.*/i,
                    handler: "CacheFirst",
                    options: {
                      cacheName: "google-fonts-cache",
                      expiration: {
                        maxEntries: 10,
                        maxAgeSeconds: 60 * 60 * 24 * 365, // 1 year
                      },
                    },
                  },
                  // Force HTTPS for external resources
                  {
                    urlPattern: /^https:\/\/.*\.(jpg|jpeg|png|gif|webp|svg)$/i,
                    handler: "CacheFirst",
                    options: {
                      cacheName: "images-cache",
                      expiration: {
                        maxEntries: 100,
                        maxAgeSeconds: 60 * 60 * 24 * 30, // 30 days
                      },
                    },
                  },
                ],
              },
            }),
          ].filter(Boolean),
          resolve: {
            alias: {
              "@": path.resolve(__dirname, "./src"),
            },
          },
          build: {
            // Optimize build for HTTPS
            target: 'esnext',
            minify: 'terser',
            sourcemap: false,
            rollupOptions: {
              output: {
                manualChunks: {
                  vendor: ['react', 'react-dom'],
                  router: ['react-router-dom'],
                  ui: ['@radix-ui/react-dialog', '@radix-ui/react-dropdown-menu']
                }
              }
            }
          }
        }));
        EOF
        
        echo "✅ Vite configuration updated for HTTPS"
        
    - name: Create HTTPS utility for client-side enforcement
      run: |
        mkdir -p src/utils
        cat > src/utils/https.ts << 'EOF'
        /**
         * HTTPS Enforcement Utilities
         * Ensures all requests and resources use HTTPS in production
         */

        // Check if we're in production and should enforce HTTPS
        export const shouldForceHTTPS = (): boolean => {
          return import.meta.env.PROD && 
                 import.meta.env.VITE_FORCE_HTTPS === 'true' &&
                 typeof window !== 'undefined' &&
                 window.location.protocol === 'http:' &&
                 !window.location.hostname.includes('localhost');
        };

        // Redirect to HTTPS if needed
        export const enforceHTTPS = (): void => {
          if (shouldForceHTTPS()) {
            const httpsUrl = window.location.href.replace('http://', 'https://');
            console.log('🔒 Redirecting to HTTPS:', httpsUrl);
            window.location.replace(httpsUrl);
          }
        };

        // Ensure URL uses HTTPS in production
        export const ensureHTTPS = (url: string): string => {
          if (!url) return url;
          
          // If it's a relative URL, return as-is
          if (url.startsWith('/') || url.startsWith('./') || url.startsWith('../')) {
            return url;
          }
          
          // If it's an absolute URL and we're in production, force HTTPS
          if (import.meta.env.PROD && url.startsWith('http://')) {
            return url.replace('http://', 'https://');
          }
          
          return url;
        };

        // Create secure fetch wrapper
        export const secureFetch = (url: string, options?: RequestInit): Promise<Response> => {
          const secureUrl = ensureHTTPS(url);
          return fetch(secureUrl, {
            ...options,
            // Add security headers
            headers: {
              ...options?.headers,
              'X-Requested-With': 'XMLHttpRequest',
              'Cache-Control': 'no-cache',
            },
          });
        };

        // Configure CSP for HTTPS enforcement
        export const getCSPHeaders = (): Record<string, string> => {
          if (!import.meta.env.PROD) return {};
          
          return {
            'Content-Security-Policy': [
              "default-src 'self' https:",
              "script-src 'self' 'unsafe-inline' 'unsafe-eval' https:",
              "style-src 'self' 'unsafe-inline' https:",
              "img-src 'self' data: https:",
              "font-src 'self' https:",
              "connect-src 'self' https:",
              "media-src 'self' https:",
              "object-src 'none'",
              "base-uri 'self'",
              "form-action 'self' https:",
              "frame-ancestors 'none'",
              "block-all-mixed-content",
              "upgrade-insecure-requests"
            ].join('; ')
          };
        };

        // Initialize HTTPS enforcement on app load
        export const initHTTPSEnforcement = (): void => {
          // Only run in browser
          if (typeof window === 'undefined') return;
          
          // Enforce HTTPS redirect
          enforceHTTPS();
          
          // Set up CSP headers if possible
          const cspHeaders = getCSPHeaders();
          if (Object.keys(cspHeaders).length > 0) {
            // Try to set meta tag for CSP
            const cspMeta = document.createElement('meta');
            cspMeta.httpEquiv = 'Content-Security-Policy';
            cspMeta.content = cspHeaders['Content-Security-Policy'];
            document.head.appendChild(cspMeta);
          }
          
          // Log HTTPS status
          console.log('🔒 HTTPS Status:', {
            protocol: window.location.protocol,
            hostname: window.location.hostname,
            isSecure: window.location.protocol === 'https:',
            shouldForceHTTPS: shouldForceHTTPS()
          });
        };
        EOF
        
        echo "✅ HTTPS utilities created"
        
    - name: Update main App component for HTTPS enforcement
      run: |
        # Update main.tsx to include HTTPS enforcement
        cp src/main.tsx src/main.tsx.bak
        
        # Add HTTPS enforcement to main.tsx
        cat > src/main.tsx << 'EOF'
        import React from 'react'
        import ReactDOM from 'react-dom/client'
        import { BrowserRouter } from 'react-router-dom'
        import App from './App.tsx'
        import './index.css'
        import { ThemeProvider } from '@/components/ThemeProvider'
        import { ToastProvider } from '@/contexts/ToastContext'
        import { initHTTPSEnforcement } from '@/utils/https'

        // Initialize HTTPS enforcement as early as possible
        initHTTPSEnforcement();

        ReactDOM.createRoot(document.getElementById('root')!).render(
          <React.StrictMode>
            <BrowserRouter>
              <ThemeProvider defaultTheme="light" storageKey="vite-ui-theme">
                <ToastProvider>
                  <App />
                </ToastProvider>
              </ThemeProvider>
            </BrowserRouter>
          </React.StrictMode>,
        )
        EOF
        
        echo "✅ Main component updated with HTTPS enforcement"
        
    - name: Update Dockerfile for HTTPS configuration
      run: |
        # Backup original Dockerfile
        cp Dockerfile Dockerfile.bak
        
        # Update Dockerfile to include HTTPS-friendly configuration
        cat > Dockerfile << 'EOF'
        # Multi-stage build para otimizar o tamanho da imagem
        FROM node:18-alpine AS builder

        # Instalar dependências necessárias
        RUN apk add --no-cache libc6-compat

        # Definir diretório de trabalho
        WORKDIR /app

        # Copiar arquivos de dependências
        COPY package*.json ./
        COPY bun.lockb ./

        # Instalar dependências
        RUN npm ci --frozen-lockfile

        # Copiar código fonte
        COPY . .

        # Copy production environment configuration
        COPY .env.production ./

        # Build da aplicação com configurações de produção
        ENV NODE_ENV=production
        RUN npm run build

        # Estágio de produção - Servir arquivos estáticos diretamente
        FROM node:18-alpine AS production

        # Instalar serve para servir arquivos estáticos
        RUN npm install -g serve

        # Instalar curl para health checks
        RUN apk --no-cache add curl

        # Criar usuário não-root
        RUN addgroup -g 1001 -S nodejs
        RUN adduser -S nextjs -u 1001

        # Copiar build da aplicação
        COPY --from=builder --chown=nextjs:nodejs /app/dist /app

        # Create serve configuration for HTTPS-friendly serving
        RUN echo '{ \
          "public": "/app", \
          "rewrites": [ \
            { "source": "**", "destination": "/index.html" } \
          ], \
          "headers": [ \
            { \
              "source": "**", \
              "headers": [ \
                { "key": "X-Content-Type-Options", "value": "nosniff" }, \
                { "key": "X-Frame-Options", "value": "DENY" }, \
                { "key": "X-XSS-Protection", "value": "1; mode=block" }, \
                { "key": "Strict-Transport-Security", "value": "max-age=31536000; includeSubDomains" }, \
                { "key": "Content-Security-Policy", "value": "default-src '\''self'\'' https:; script-src '\''self'\'' '\''unsafe-inline'\'' '\''unsafe-eval'\'' https:; style-src '\''self'\'' '\''unsafe-inline'\'' https:; img-src '\''self'\'' data: https:; font-src '\''self'\'' https:; connect-src '\''self'\'' https:; upgrade-insecure-requests" } \
              ] \
            } \
          ] \
        }' > /serve.json

        # Mudar para usuário não-root
        USER nextjs

        # Definir diretório de trabalho
        WORKDIR /app

        # Expor porta 3000 (serve usa 3000 por padrão)
        EXPOSE 3000

        # Health check que funciona com HTTPS enforcement
        HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
          CMD curl -f http://localhost:3000/ || exit 1

        # Comando para servir a aplicação com configuração de segurança
        CMD ["serve", "-c", "/serve.json", "-l", "3000", "/app"]
        EOF
        
        echo "✅ Dockerfile updated with HTTPS security headers"
        
    - name: Update deployment workflow for HTTPS
      run: |
        # Create updated deployment configuration
        mkdir -p .github/workflows
        cp .github/workflows/deploy.yml .github/workflows/deploy.yml.bak
        
        # Update deploy.yml to include HTTPS configuration
        sed -i 's/--network traefik/--network root_default/g' .github/workflows/deploy.yml || \
        sed -i 's/--network traefik/--network root_default/g' .github/workflows/deploy.yml
        
        echo "✅ Deployment workflow updated for correct network"
        
    - name: Build and test application
      run: |
        echo "🔨 Building application with HTTPS configuration..."
        npm run build
        
        echo "✅ Build completed successfully"
        
        # Check for potential mixed content issues in build
        echo "🔍 Checking for potential mixed content issues..."
        
        if grep -r "http://" dist/ --include="*.js" --include="*.css" --exclude="*.map" 2>/dev/null; then
          echo "⚠️ Found potential HTTP references in build files"
        else
          echo "✅ No HTTP references found in build files"
        fi
        
    - name: Create production deployment package
      run: |
        echo "📦 Creating production deployment package..."
        
        # Package everything needed for deployment
        tar -czf storyspark-https-production.tar.gz \
          dist/ \
          Dockerfile \
          .env.production \
          package.json \
          .github/workflows/deploy.yml
          
        echo "✅ Production package created: storyspark-https-production.tar.gz"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: storyspark-https-build
        path: |
          storyspark-https-production.tar.gz
          dist/
          .env.production
        retention-days: 7
        
    - name: Update container registry with HTTPS-enabled image
      run: |
        echo "🔄 Building and pushing HTTPS-enabled Docker image..."
        
        # Build Docker image
        docker build -t ghcr.io/paulohenriquejr/storyspark:https-latest .
        
        echo "✅ Docker image built successfully"
        
        echo "📤 Image ready for manual push to registry"
        echo "   Run: docker push ghcr.io/paulohenriquejr/storyspark:https-latest"
        
    - name: HTTPS Configuration Summary
      run: |
        echo ""
        echo "🔒 HTTPS CONFIGURATION SUMMARY"
        echo "==============================="
        echo ""
        echo "✅ Changes Made:"
        echo "  • Created production environment with HTTPS enforcement"
        echo "  • Updated Vite configuration for secure builds"
        echo "  • Added HTTPS utilities for client-side enforcement"
        echo "  • Updated main.tsx with HTTPS initialization"
        echo "  • Enhanced Dockerfile with security headers"
        echo "  • Fixed deployment network configuration"
        echo ""
        echo "🚀 Next Steps:"
        echo "  1. Push changes to main branch"
        echo "  2. Deploy updated containers to VPS"
        echo "  3. Test HTTPS domains:"
        echo "     • https://app.storyspark.com.br"
        echo "     • https://www.storyspark.com.br"
        echo "     • https://admin.storyspark.com.br"
        echo ""
        echo "🔧 Key Features Added:"
        echo "  • Automatic HTTP to HTTPS redirects"
        echo "  • Content Security Policy headers"
        echo "  • Mixed content prevention"
        echo "  • Secure cookie configuration"
        echo "  • HSTS headers for browsers"
        echo ""
        echo "⚡ The application will now:"
        echo "  • Force HTTPS in production"
        echo "  • Block mixed content"
        echo "  • Include security headers"
        echo "  • Redirect HTTP to HTTPS automatically"
        echo ""
        echo "🔍 After deployment, check browser console for:"
        echo "  • No mixed content warnings"
        echo "  • Green padlock icon"
        echo "  • Proper SSL certificate validation"
