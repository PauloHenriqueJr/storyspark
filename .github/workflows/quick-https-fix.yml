name: Quick Fix - Update Network and Deploy HTTPS

on:
  workflow_dispatch:

jobs:
  quick-fix:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Quick HTTPS and Network Fix on VPS
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        script: |
          echo "üîß Quick HTTPS and Network Fix"
          echo "=============================="
          echo "üìÖ Timestamp: $(date)"
          echo ""
          
          # Step 1: Identify Traefik network
          echo "1Ô∏è‚É£ IDENTIFYING TRAEFIK NETWORK:"
          traefik_container=$(docker ps | grep traefik | awk '{print $NF}')
          
          if [ -n "$traefik_container" ]; then
            echo "‚úÖ Traefik container found: $traefik_container"
            
            # Get Traefik's actual network
            traefik_network=$(docker inspect $traefik_container --format '{{range $net, $conf := .NetworkSettings.Networks}}{{$net}} {{end}}' | awk '{print $1}')
            echo "üåê Traefik network: $traefik_network"
          else
            echo "‚ùå Traefik container not found - using default"
            traefik_network="root_default"
          fi
          echo ""
          
          # Step 2: Stop and remove existing containers
          echo "2Ô∏è‚É£ STOPPING EXISTING CONTAINERS:"
          for container in storyspark-app storyspark-www storyspark-admin; do
            if docker ps -q -f name=$container | grep -q .; then
              echo "Stopping $container..."
              docker stop $container
              docker rm $container
            else
              echo "$container not running"
            fi
          done
          echo ""
          
          # Step 3: Pull latest image
          echo "3Ô∏è‚É£ PULLING LATEST IMAGE:"
          REGISTRY="ghcr.io"
          IMAGE_NAME="paulohenriquejr/storyspark"
          FULL_IMAGE="$REGISTRY/$IMAGE_NAME:latest"
          
          echo "üì• Pulling $FULL_IMAGE..."
          docker pull $FULL_IMAGE
          echo ""
          
          # Step 4: Deploy with correct network and HTTPS labels
          echo "4Ô∏è‚É£ DEPLOYING WITH HTTPS CONFIGURATION:"
          
          # App Principal (app.storyspark.com.br)
          echo "üåê Deploying storyspark-app with HTTPS..."
          docker run -d \
            --name storyspark-app \
            --network $traefik_network \
            --restart unless-stopped \
            --label "traefik.enable=true" \
            --label "traefik.http.routers.storyspark-app.rule=Host(\`app.storyspark.com.br\`)" \
            --label "traefik.http.routers.storyspark-app.tls=true" \
            --label "traefik.http.routers.storyspark-app.tls.certresolver=letsencrypt" \
            --label "traefik.http.routers.storyspark-app.entrypoints=websecure" \
            --label "traefik.http.services.storyspark-app.loadbalancer.server.port=3000" \
            --label "traefik.http.middlewares.storyspark-app-https.redirectscheme.scheme=https" \
            --label "traefik.http.middlewares.storyspark-app-https.redirectscheme.permanent=true" \
            --label "traefik.http.routers.storyspark-app-http.rule=Host(\`app.storyspark.com.br\`)" \
            --label "traefik.http.routers.storyspark-app-http.entrypoints=web" \
            --label "traefik.http.routers.storyspark-app-http.middlewares=storyspark-app-https" \
            $FULL_IMAGE
          
          # Landing Page (www.storyspark.com.br)
          echo "üè† Deploying storyspark-www with HTTPS..."
          docker run -d \
            --name storyspark-www \
            --network $traefik_network \
            --restart unless-stopped \
            --label "traefik.enable=true" \
            --label "traefik.http.routers.storyspark-www.rule=Host(\`www.storyspark.com.br\`) || Host(\`storyspark.com.br\`)" \
            --label "traefik.http.routers.storyspark-www.tls=true" \
            --label "traefik.http.routers.storyspark-www.tls.certresolver=letsencrypt" \
            --label "traefik.http.routers.storyspark-www.entrypoints=websecure" \
            --label "traefik.http.services.storyspark-www.loadbalancer.server.port=3000" \
            --label "traefik.http.middlewares.storyspark-www-https.redirectscheme.scheme=https" \
            --label "traefik.http.middlewares.storyspark-www-https.redirectscheme.permanent=true" \
            --label "traefik.http.routers.storyspark-www-http.rule=Host(\`www.storyspark.com.br\`) || Host(\`storyspark.com.br\`)" \
            --label "traefik.http.routers.storyspark-www-http.entrypoints=web" \
            --label "traefik.http.routers.storyspark-www-http.middlewares=storyspark-www-https" \
            $FULL_IMAGE
          
          # Admin (admin.storyspark.com.br)
          echo "‚öôÔ∏è Deploying storyspark-admin with HTTPS..."
          docker run -d \
            --name storyspark-admin \
            --network $traefik_network \
            --restart unless-stopped \
            --label "traefik.enable=true" \
            --label "traefik.http.routers.storyspark-admin.rule=Host(\`admin.storyspark.com.br\`)" \
            --label "traefik.http.routers.storyspark-admin.tls=true" \
            --label "traefik.http.routers.storyspark-admin.tls.certresolver=letsencrypt" \
            --label "traefik.http.routers.storyspark-admin.entrypoints=websecure" \
            --label "traefik.http.services.storyspark-admin.loadbalancer.server.port=3000" \
            --label "traefik.http.middlewares.storyspark-admin-https.redirectscheme.scheme=https" \
            --label "traefik.http.middlewares.storyspark-admin-https.redirectscheme.permanent=true" \
            --label "traefik.http.routers.storyspark-admin-http.rule=Host(\`admin.storyspark.com.br\`)" \
            --label "traefik.http.routers.storyspark-admin-http.entrypoints=web" \
            --label "traefik.http.routers.storyspark-admin-http.middlewares=storyspark-admin-https" \
            $FULL_IMAGE
          
          # Step 5: Wait and verify
          echo ""
          echo "5Ô∏è‚É£ WAITING FOR STARTUP:"
          sleep 20
          
          echo "üìä Container Status:"
          docker ps | grep storyspark
          echo ""
          
          echo "üåê Network Status:"
          echo "Containers in $traefik_network network:"
          docker network inspect $traefik_network | grep -A 5 '"Name":' | grep -E "(storyspark|traefik)" || echo "No StorySpark containers found in network"
          echo ""
          
          # Step 6: Force certificate generation
          echo "6Ô∏è‚É£ FORCING SSL CERTIFICATE GENERATION:"
          
          echo "Triggering certificate requests..."
          for domain in app.storyspark.com.br www.storyspark.com.br admin.storyspark.com.br; do
            echo "Testing $domain..."
            
            # Test HTTP (should redirect to HTTPS)
            http_test=$(curl -s -I -w "%{http_code}" http://$domain --max-time 10 2>/dev/null || echo "failed")
            echo "  HTTP: $http_test"
            
            # Test HTTPS
            https_test=$(curl -s -I -w "%{http_code}" https://$domain --max-time 15 --insecure 2>/dev/null || echo "failed")
            echo "  HTTPS: $https_test"
            
            sleep 2
          done
          echo ""
          
          # Step 7: Check Traefik logs for certificate activity
          echo "7Ô∏è‚É£ CHECKING CERTIFICATE GENERATION:"
          echo "Recent Traefik certificate logs:"
          docker logs $traefik_container --tail 20 | grep -i -E "(certificate|acme|letsencrypt|challenge)" || echo "No certificate activity in recent logs"
          echo ""
          
          # Step 8: Final test
          echo "8Ô∏è‚É£ FINAL HTTPS TEST:"
          echo "Testing HTTPS after 30 seconds..."
          sleep 30
          
          for domain in app.storyspark.com.br www.storyspark.com.br admin.storyspark.com.br; do
            echo "Final test for $domain:"
            
            # Test HTTPS status
            https_final=$(curl -s -w "%{http_code}" https://$domain --max-time 20 -o /dev/null 2>/dev/null || echo "timeout")
            
            if [ "$https_final" = "200" ]; then
              echo "  ‚úÖ HTTPS working (200 OK)"
            else
              echo "  ‚ö†Ô∏è HTTPS status: $https_final"
            fi
          done
          echo ""
          
          echo "üéâ DEPLOYMENT COMPLETE!"
          echo "======================"
          echo ""
          echo "üîç Next Steps:"
          echo "1. Wait 2-5 minutes for SSL certificate generation"
          echo "2. Test domains in browser:"
          echo "   ‚Ä¢ https://app.storyspark.com.br"
          echo "   ‚Ä¢ https://www.storyspark.com.br"  
          echo "   ‚Ä¢ https://admin.storyspark.com.br"
          echo "3. Check for green padlock (SSL certificate)"
          echo "4. Clear browser cache if needed"
          echo ""
          echo "üîß Configuration Applied:"
          echo "‚Ä¢ Containers deployed to correct Traefik network: $traefik_network"
          echo "‚Ä¢ HTTP to HTTPS redirects configured"
          echo "‚Ä¢ SSL certificates should generate automatically"
          echo "‚Ä¢ Security headers included in Docker image"
          echo ""
          echo "‚ö° If SSL still shows red:"
          echo "‚Ä¢ Wait up to 5 minutes for Let's Encrypt"
          echo "‚Ä¢ Clear browser cache and cookies"
          echo "‚Ä¢ Try incognito/private browsing mode"
          echo "‚Ä¢ Check browser console for mixed content errors"
