name: Deploy StorySpark to VPS

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job para build e testes
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint || echo "‚ö†Ô∏è Lint warnings found, but continuing deployment"

    - name: Run type check
      run: npm run type-check

    - name: Build application
      run: npm run build

    - name: Run tests (quando implementados)
      run: echo "Tests will be implemented here"
      # run: npm test

  # Job para build e push da imagem Docker
  docker-build-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job para deploy na VPS
  deploy-to-vps:
    needs: docker-build-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        script: |
          echo "üöÄ Starting StorySpark deployment..."
          
          # Login no GitHub Container Registry
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Baixar nova imagem
          echo "üì• Pulling latest image..."
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Parar e remover containers antigos (se existirem)
          echo "ÔøΩ Stopping old containers..."
          docker stop storyspark-app storyspark-www storyspark-admin 2>/dev/null || true
          docker rm storyspark-app storyspark-www storyspark-admin 2>/dev/null || true
          
          # Verificar se rede Traefik existe
          docker network ls | grep traefik || docker network create traefik
          
          # Deploy do App Principal (app.storyspark.com.br)
          echo "üåê Deploying main app..."
          docker run -d \
            --name storyspark-app \
            --network traefik \
            --restart unless-stopped \
            --label "traefik.enable=true" \
            --label "traefik.http.routers.storyspark-app.rule=Host(\`app.storyspark.com.br\`)" \
            --label "traefik.http.routers.storyspark-app.tls=true" \
            --label "traefik.http.routers.storyspark-app.tls.certresolver=letsencrypt" \
            --label "traefik.http.services.storyspark-app.loadbalancer.server.port=3000" \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Deploy da Landing Page (www.storyspark.com.br)
          echo "üè† Deploying landing page..."
          docker run -d \
            --name storyspark-www \
            --network traefik \
            --restart unless-stopped \
            --label "traefik.enable=true" \
            --label "traefik.http.routers.storyspark-www.rule=Host(\`www.storyspark.com.br\`) || Host(\`storyspark.com.br\`)" \
            --label "traefik.http.routers.storyspark-www.tls=true" \
            --label "traefik.http.routers.storyspark-www.tls.certresolver=letsencrypt" \
            --label "traefik.http.services.storyspark-www.loadbalancer.server.port=3000" \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Deploy do Admin (admin.storyspark.com.br)
          echo "‚öôÔ∏è Deploying admin panel..."
          docker run -d \
            --name storyspark-admin \
            --network traefik \
            --restart unless-stopped \
            --label "traefik.enable=true" \
            --label "traefik.http.routers.storyspark-admin.rule=Host(\`admin.storyspark.com.br\`)" \
            --label "traefik.http.routers.storyspark-admin.tls=true" \
            --label "traefik.http.routers.storyspark-admin.tls.certresolver=letsencrypt" \
            --label "traefik.http.services.storyspark-admin.loadbalancer.server.port=3000" \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Aguardar containers iniciarem
          echo "‚è≥ Waiting for containers to start..."
          sleep 15
          
          # Verificar status dos containers
          echo "üìä Container status:"
          docker ps | grep storyspark
          
          # Verificar se Traefik est√° rodando
          echo "üîç Checking Traefik..."
          docker ps | grep traefik || echo "‚ö†Ô∏è Warning: Traefik not running"
          
          # Limpeza de imagens antigas
          echo "üßπ Cleaning up old images..."
          docker image prune -f
          
          echo "‚úÖ Deployment complete!"
          echo "üåê App should be available at:"
          echo "   - https://app.storyspark.com.br"
          echo "   - https://www.storyspark.com.br"
          echo "   - https://admin.storyspark.com.br"

  # Job para notifica√ß√£o (opcional)
  notify:
    needs: [build-and-test, docker-build-push, deploy-to-vps]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy-to-vps.result }}" == "success" ]; then
          echo "‚úÖ Deploy realizado com sucesso!"
          echo "üöÄ StorySpark est√° rodando em: https://app.storyspark.com.br"
        else
          echo "‚ùå Deploy falhou. Verifique os logs."
        fi
