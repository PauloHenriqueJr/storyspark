#!/usr/bin/env node

import { createClient } from '@supabase/supabase-js';
import { readFileSync } from 'fs';
import { join } from 'path';
import dotenv from 'dotenv';

// Carregar vari√°veis de ambiente
dotenv.config();

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
    console.error('‚ùå Erro: Vari√°veis de ambiente do Supabase n√£o encontradas');
    console.error('Verifique VITE_SUPABASE_URL e SUPABASE_SERVICE_ROLE_KEY');
    process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function applyRLSFix() {
    console.log('üîß Aplicando corre√ß√£o de RLS e sistema de cr√©ditos...\n');

    try {
        // Ler o arquivo SQL
        const sqlContent = readFileSync(join(process.cwd(), 'sql', 'fix_profiles_rls_and_credits.sql'), 'utf8');

        // Dividir o SQL em comandos separados (por linhas vazias ou coment√°rios)
        const sqlCommands = sqlContent
            .split(';')
            .map(cmd => cmd.trim())
            .filter(cmd => cmd && !cmd.startsWith('--') && cmd !== '');

        console.log(`üìù Encontrados ${sqlCommands.length} comandos SQL para executar...\n`);

        let successCount = 0;
        let errorCount = 0;

        for (let i = 0; i < sqlCommands.length; i++) {
            const command = sqlCommands[i];
            if (!command) continue;

            try {
                console.log(`‚ö° Executando comando ${i + 1}/${sqlCommands.length}...`);

                const { error } = await supabase.rpc('exec_sql', {
                    query: command + ';'
                });

                if (error) {
                    console.error(`‚ùå Erro no comando ${i + 1}:`, error.message);
                    errorCount++;
                } else {
                    console.log(`‚úÖ Comando ${i + 1} executado com sucesso`);
                    successCount++;
                }
            } catch (err) {
                console.error(`‚ùå Erro inesperado no comando ${i + 1}:`, err);
                errorCount++;
            }
        }

        console.log(`\nüìä Resumo da execu√ß√£o:`);
        console.log(`‚úÖ Sucessos: ${successCount}`);
        console.log(`‚ùå Erros: ${errorCount}`);

        // Verificar se as pol√≠ticas foram criadas
        console.log('\nüîç Verificando pol√≠ticas RLS criadas...');

        const { data: policies, error: policiesError } = await supabase
            .from('pg_policies')
            .select('policyname, tablename')
            .eq('tablename', 'profiles');

        if (policiesError) {
            console.error('‚ùå Erro ao verificar pol√≠ticas:', policiesError.message);
        } else {
            console.log(`‚úÖ ${policies?.length || 0} pol√≠ticas encontradas na tabela profiles:`);
            policies?.forEach(policy => {
                console.log(`  - ${policy.policyname}`);
            });
        }

        // Testar adi√ß√£o de cr√©ditos
        console.log('\nüß™ Testando fun√ß√£o de adicionar cr√©ditos...');

        const { data: testResult, error: testError } = await supabase.rpc('admin_add_credits', {
            target_user_id: '00000000-0000-0000-0000-000000000000', // UUID de teste
            credits_to_add: 50,
            reason: 'Teste da fun√ß√£o admin_add_credits'
        });

        if (testError && testError.message.includes('Usu√°rio n√£o encontrado')) {
            console.log('‚úÖ Fun√ß√£o admin_add_credits criada e funcionando (usu√°rio de teste n√£o encontrado, como esperado)');
        } else if (testError) {
            console.error('‚ùå Erro ao testar fun√ß√£o:', testError.message);
        } else {
            console.log('‚úÖ Fun√ß√£o admin_add_credits funcionando:', testResult);
        }

    } catch (error) {
        console.error('‚ùå Erro geral:', error);
        process.exit(1);
    }
}

// Executar se foi chamado diretamente
if (import.meta.url === `file://${process.argv[1]}`) {
    applyRLSFix()
        .then(() => {
            console.log('\nüéâ Corre√ß√£o de RLS e cr√©ditos aplicada com sucesso!');
            console.log('\nüìù Pr√≥ximos passos:');
            console.log('1. Teste adicionar cr√©ditos na interface admin');
            console.log('2. Verifique se o admin consegue atualizar cr√©ditos');
            console.log('3. Confirme que usu√°rios normais n√£o perdem acesso');
            process.exit(0);
        })
        .catch((error) => {
            console.error('‚ùå Falha na aplica√ß√£o da corre√ß√£o:', error);
            process.exit(1);
        });
}

export { applyRLSFix };
